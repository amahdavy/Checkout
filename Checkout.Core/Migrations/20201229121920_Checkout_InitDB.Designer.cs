// <auto-generated />
using System;
using Checkout.Core.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Checkout.Core.Migrations
{
    [DbContext(typeof(CheckoutDBContext))]
    [Migration("20201229121920_Checkout_InitDB")]
    partial class Checkout_InitDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Checkout.Core.Models.Account.Merchant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastLoging")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("tbl_Merchant");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Email = "abolfazl.mahdavi@gmail.com",
                            InsertDate = new DateTime(2020, 12, 29, 13, 19, 18, 985, DateTimeKind.Local).AddTicks(1753),
                            Name = "Mahdavy.com",
                            Password = "123",
                            Phone = "969696",
                            Website = "http://www.mahdavy.com"
                        });
                });

            modelBuilder.Entity("Checkout.Core.Models.Account.MerchantProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("APIKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MerchantId")
                        .HasColumnType("bigint");

                    b.Property<int>("Mode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MerchantId");

                    b.ToTable("tbl_MerchantProfile");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            APIKey = "test_a02f7e6a-7768-4244-8032-8979f25d9581",
                            InsertDate = new DateTime(2020, 12, 29, 13, 19, 18, 992, DateTimeKind.Local).AddTicks(7784),
                            Logo = "https://acropaq.com/image/data/logo.png",
                            MerchantId = 1L,
                            Mode = 1,
                            Name = "Mahdavi Shop 1",
                            Website = "shop.mahdavy.com"
                        },
                        new
                        {
                            Id = 2L,
                            APIKey = "live_974281d1-0e8d-4279-a4fa-4e37cd002b74",
                            InsertDate = new DateTime(2020, 12, 29, 13, 19, 18, 993, DateTimeKind.Local).AddTicks(1918),
                            Logo = "https://acropaq.com/image/data/logo.png",
                            MerchantId = 1L,
                            Mode = 0,
                            Name = "Mahdavi Shop",
                            Website = "shop.mahdavy.com"
                        });
                });

            modelBuilder.Entity("Checkout.Core.Models.Payment.MerchantProfilesPaymentMethods", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("MerchantProfileId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("PaymentMethodId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("MerchantProfileId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("tbl_MerchantProfilesPaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            InsertDate = new DateTime(2020, 12, 29, 13, 19, 18, 993, DateTimeKind.Local).AddTicks(2388),
                            MerchantProfileId = 1L,
                            PaymentMethodId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            InsertDate = new DateTime(2020, 12, 29, 13, 19, 18, 993, DateTimeKind.Local).AddTicks(3665),
                            MerchantProfileId = 1L,
                            PaymentMethodId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            InsertDate = new DateTime(2020, 12, 29, 13, 19, 18, 993, DateTimeKind.Local).AddTicks(3728),
                            MerchantProfileId = 1L,
                            PaymentMethodId = 4L
                        });
                });

            modelBuilder.Entity("Checkout.Core.Models.Payment.PaymentMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("tbl_PaymentMethod");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            InsertDate = new DateTime(2020, 12, 29, 13, 19, 18, 991, DateTimeKind.Local).AddTicks(9453),
                            Logo = "fab fa-apple-pay fa-lg",
                            Name = "ApplePay"
                        },
                        new
                        {
                            Id = 2L,
                            InsertDate = new DateTime(2020, 12, 29, 13, 19, 18, 992, DateTimeKind.Local).AddTicks(1412),
                            Logo = "fa fa-credit-card fa-lg",
                            Name = "CreditCard"
                        },
                        new
                        {
                            Id = 3L,
                            InsertDate = new DateTime(2020, 12, 29, 13, 19, 18, 992, DateTimeKind.Local).AddTicks(1481),
                            Logo = "fa fa-credit-card fa-lg",
                            Name = "DirectDebit"
                        },
                        new
                        {
                            Id = 4L,
                            InsertDate = new DateTime(2020, 12, 29, 13, 19, 18, 992, DateTimeKind.Local).AddTicks(1489),
                            Logo = "fa fa-university fa-lg",
                            Name = "BankTransfer"
                        });
                });

            modelBuilder.Entity("Checkout.Core.Models.Payment.TemporaryTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Locale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MandateId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("MerchantProfileId")
                        .HasColumnType("bigint");

                    b.Property<string>("Metadata")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RedirectUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SequenceType")
                        .HasColumnType("int");

                    b.Property<bool?>("TestMode")
                        .HasColumnType("bit");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("TransctionCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WebhookUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MerchantProfileId");

                    b.ToTable("tbl_TemporaryTransaction");
                });

            modelBuilder.Entity("Checkout.Core.Models.Payment.TransactionBase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("MerchantProfileId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("TemporaryTransactionId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransctionCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("MerchantProfileId");

                    b.HasIndex("TemporaryTransactionId");

                    b.ToTable("tbl_TransactionBase");
                });

            modelBuilder.Entity("Checkout.Core.Models.Payment.CardTransaction", b =>
                {
                    b.HasBaseType("Checkout.Core.Models.Payment.TransactionBase");

                    b.Property<string>("BillingAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CCV")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(19)
                        .HasColumnType("nvarchar(19)");

                    b.Property<int>("ExpMonth")
                        .HasColumnType("int");

                    b.Property<int>("ExpYear")
                        .HasColumnType("int");

                    b.Property<string>("HolderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.ToTable("tbl_CardTransaction");
                });

            modelBuilder.Entity("Checkout.Core.Models.Account.MerchantProfile", b =>
                {
                    b.HasOne("Checkout.Core.Models.Account.Merchant", "Merchant")
                        .WithMany("Profiles")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Checkout.Core.Models.Payment.MerchantProfilesPaymentMethods", b =>
                {
                    b.HasOne("Checkout.Core.Models.Account.MerchantProfile", "MerchantProfile")
                        .WithMany("MerchantProfilesPaymentMethods")
                        .HasForeignKey("MerchantProfileId");

                    b.HasOne("Checkout.Core.Models.Payment.PaymentMethod", "PaymentMethod")
                        .WithMany("MerchantProfilesPaymentMethods")
                        .HasForeignKey("PaymentMethodId");

                    b.Navigation("MerchantProfile");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Checkout.Core.Models.Payment.TemporaryTransaction", b =>
                {
                    b.HasOne("Checkout.Core.Models.Account.MerchantProfile", "MerchantProfile")
                        .WithMany()
                        .HasForeignKey("MerchantProfileId");

                    b.OwnsOne("Checkout.Core.Models.Payment.Amount", "Amount", b1 =>
                        {
                            b1.Property<long>("TemporaryTransactionId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .UseIdentityColumn();

                            b1.Property<string>("Currency")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TemporaryTransactionId");

                            b1.ToTable("tbl_TemporaryTransaction");

                            b1.WithOwner()
                                .HasForeignKey("TemporaryTransactionId");
                        });

                    b.Navigation("Amount");

                    b.Navigation("MerchantProfile");
                });

            modelBuilder.Entity("Checkout.Core.Models.Payment.TransactionBase", b =>
                {
                    b.HasOne("Checkout.Core.Models.Account.MerchantProfile", "MerchantProfile")
                        .WithMany()
                        .HasForeignKey("MerchantProfileId");

                    b.HasOne("Checkout.Core.Models.Payment.TemporaryTransaction", "TemporaryTransaction")
                        .WithMany()
                        .HasForeignKey("TemporaryTransactionId");

                    b.OwnsOne("Checkout.Core.Models.Payment.Amount", "Amount", b1 =>
                        {
                            b1.Property<long>("TransactionBaseId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .UseIdentityColumn();

                            b1.Property<string>("Currency")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TransactionBaseId");

                            b1.ToTable("tbl_TransactionBase");

                            b1.WithOwner()
                                .HasForeignKey("TransactionBaseId");
                        });

                    b.Navigation("Amount");

                    b.Navigation("MerchantProfile");

                    b.Navigation("TemporaryTransaction");
                });

            modelBuilder.Entity("Checkout.Core.Models.Payment.CardTransaction", b =>
                {
                    b.HasOne("Checkout.Core.Models.Payment.TransactionBase", null)
                        .WithOne()
                        .HasForeignKey("Checkout.Core.Models.Payment.CardTransaction", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Checkout.Core.Models.Account.Merchant", b =>
                {
                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("Checkout.Core.Models.Account.MerchantProfile", b =>
                {
                    b.Navigation("MerchantProfilesPaymentMethods");
                });

            modelBuilder.Entity("Checkout.Core.Models.Payment.PaymentMethod", b =>
                {
                    b.Navigation("MerchantProfilesPaymentMethods");
                });
#pragma warning restore 612, 618
        }
    }
}
